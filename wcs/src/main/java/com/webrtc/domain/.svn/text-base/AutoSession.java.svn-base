package com.webrtc.domain;

import java.util.HashMap;
import java.util.Timer;
import java.util.TimerTask;

import org.json.JSONException;
import org.json.JSONObject;

import com.webrtc.common.AutoSessionStateType;
import com.webrtc.common.Constants;
import com.webrtc.service.SocketService;


/**
 * 存储外部用户与自动总机会话的必要信息
 * by yck
 *
 */
public class AutoSession {

	private static HashMap<String, AutoSession> autoSessions = new HashMap<String,AutoSession>();
	private static final int AUTOUSER_TIMEOUT_DELAY = Integer.valueOf(Constants.USER_TIMEOUT_DELAY); //会话回复的最长等待时间
	
	private String from =""; //用户名
	private String sessionID = ""; //会话的唯一标识
	private Timer  timer = null; //会话的定时器
	
	public AutoSession(String from, String sessionID, Timer timer) {

		this.from = from;
		this.sessionID = sessionID;
		this.timer = timer;
	}
	
	/**
	 * 更新
	 * 若是，添加新session会话，更新from用户的定时器为0
	 * 若不是，取消上次的定时器，更新from用户的定时器为0
	 */
	public static void update(JSONObject msgObj) throws JSONException
	{
		String from = msgObj.getString("from");
		String sessionID = msgObj.getString("sessionID");
		
		if(!autoSessions.containsKey(from)) //第一次访问，创建会话
		{
			System.out.println("创建与自动总机的新会话");
			//构造90s未响应自动销毁定时器
			Timer timer = new Timer();
			timer.schedule(new AutoUserTimeoutTimerTask(from), AUTOUSER_TIMEOUT_DELAY);
			
			AutoSession session = new AutoSession(from, sessionID, timer);
			autoSessions.put(from, session);
		}
		else //非第一次
		{
			System.out.println("与自动总机的定时器归零重新计时");
			AutoSession session = autoSessions.get(from);
			
			//先中断上个定时器
			Timer timer = session.getTimer();
			timer.cancel();
			timer = null;

			//生成一个新的定时器
			timer = new Timer();
			timer.schedule(new AutoUserTimeoutTimerTask(from), AUTOUSER_TIMEOUT_DELAY);
			session.setTimer(timer);
		}
	}
	
	/**
	 * 删除
	 * 删除clientName与自动总机的会话信息
	 */
	public static void remove(String clientName)
	{
		if(autoSessions.containsKey(clientName))
		{
			//终止定时器任务
			Timer timer = autoSessions.get(clientName).getTimer();
			if(timer != null)
			{
				timer.cancel();
				timer = null;
			}
			System.out.println("已终止"+ clientName +"的定时器任务");

			//从自动总机会话表中删除
			autoSessions.remove(clientName);		
			System.out.println("已删除"+ clientName +"与自动总机的会话信息");
			
			//发送消息给自动总机，让其删除clientName用户的会话信息
			AutoQuestionMessage autoMsg = new AutoQuestionMessage(clientName,AutoSessionStateType.END,"",-1);
			SocketService.getSocketHandlerFromServerID(Constants.AUTO_FLAG).send(autoMsg.getMsgObj().toString());
			System.out.println("已向自动总机发送终止消息");
		}
	}
	
	/**
	 * 超时
	 * 超过最长响应时间，用户未回应自动总机的终结操作
	 */
	public static class AutoUserTimeoutTimerTask extends TimerTask {

		private String userID; //用户名

		public AutoUserTimeoutTimerTask(String userID) {
			this.userID = userID;
		}

		@Override
		public void run() {

			if (autoSessions.containsKey(this.userID)) {
				
				AutoQuestionMessage autoMsg = new AutoQuestionMessage(this.userID,AutoSessionStateType.TIMEOUT,"",-1);
				SocketService.getSocketHandlerFromServerID(Constants.AUTO_FLAG).send(autoMsg.getMsgObj().toString());
				System.out.println("已向自动总机发出超时处理信息");
			}
		}
	}
	
	public static HashMap<String, AutoSession> getAutoSessions() {
		return autoSessions;
	}
	
	public String getFrom() {
		return from;
	}

	public void setFrom(String from) {
		this.from = from;
	}

	public String getSessionID() {
		return sessionID;
	}
	public void setSessionID(String sessionID) {
		this.sessionID = sessionID;
	}
	public Timer getTimer() {
		return timer;
	}
	public void setTimer(Timer timer) {
		this.timer = timer;
	}
}
