package com.webrtc.auto.core;

import java.util.HashMap;
import java.util.Map;
import java.util.Stack;

import com.webrtc.auto.common.AnswerCompo;
import com.webrtc.auto.common.Constants;
import com.webrtc.auto.common.MenuStateType;
import com.webrtc.auto.common.SessionStateType;
import com.webrtc.auto.domain.AnswerMessage;
import com.webrtc.auto.domain.Session;
import com.webrtc.auto.domain.Step;
import com.webrtc.auto.menuhandler.MenuHandler;
import com.webrtc.auto.menuhandler.FirstMenuHandler;
import com.webrtc.auto.menuhandler.QueryByFzMenuHandler;
import com.webrtc.auto.menuhandler.QueryByRealNameMenuHandler;
import com.webrtc.auto.menuhandler.QueryByRealNameResultMenuHandler;
import com.webrtc.auto.menuhandler.QueryByUserNameMenuHandler;
import com.webrtc.auto.menuhandler.QueryByUserNameResultMenuHandler;

public class AutoSwitchBoardManager
{
	
	public  static Map<String, Session> sessions = new HashMap<String, Session>();
	private static final int HEAD = AnswerCompo.HEAD;
	private static final int BODY = AnswerCompo.BODY;
	private static final int FOOTER = AnswerCompo.FOOTER;
	
	//处理外部用户的查询请求
	public static AnswerMessage handle(String from, String question, int status, int eid)
	{
		
		//计算应答答案
		AnswerMessage answerMsg = null;
		switch (status) 
		{
			case SessionStateType.REQUEST: //第一次请求
			{
				answerMsg = begin(from,eid);
			}break;
			case SessionStateType.CHAT: //聊天中
			{
				answerMsg = answer(from,question);
			}break;
			case SessionStateType.TIMEOUT: //超时
			default:
			{
				answerMsg = timeout(from);
			}break;
		}
		
		return answerMsg;
	}
	
	
	//添加新的会话至autoSessions
	public static void addNewSession(String from, int eid)
	{
		//先要删除以前的，防止刷新以后又打开总机对话框，而之前的状态却残留在后台
		sessions.remove(from);
		
		Session session = new Session();
		session.setFrom(from);
		session.setEid(eid);
		session.getStepStack().push(new Step(MenuStateType.FIRST, 0,"",1, 1));
		sessions.put(from, session);
	}
		
	//初次连接，会话开始
	public static AnswerMessage begin(String from,int eid)
	{
		//检查是否需要添加新的在总机会话
		addNewSession(from,eid);

		String[] answer = {"","",""};	
		answer[HEAD] = "欢迎进入WebRTC自动总机系统";
		answer[FOOTER] = "1按姓名 / 邮箱 / 电话 / 地址等查号,2按分组查号,3直接输入账号查询";
		
		//Session session = sessions.get(from);
		return new AnswerMessage(Constants.AUTO_FLAG,from,MenuStateType.FIRST,answer[HEAD],answer[BODY],answer[FOOTER]);
	}
	
	//会话中，回应
	public static AnswerMessage answer(String from, String question)
	{
		String[] answer = {"","",""};
		MenuHandler menuHandler = null;
		
		Session session = sessions.get(from);
		Stack<Step> stepStack = session.getStepStack();
		Step curStep = stepStack.peek();
		int curMenu = curStep.getCurMenu();
		
		switch (curMenu) 
		{
			case MenuStateType.FIRST:
			{
				menuHandler = new FirstMenuHandler();
			}break;
			case MenuStateType.QUERYBYKEYWORD:
			{
				menuHandler = new QueryByRealNameMenuHandler();
			}break;
			case MenuStateType.QUERYBYKEYWORDRESULT:
			{
				menuHandler = new QueryByRealNameResultMenuHandler();
			}break;
			case MenuStateType.QUERYBYUSERNAME:
			{
				menuHandler = new QueryByUserNameMenuHandler();
			}break;
			case MenuStateType.QUERYBYUSERNAMERESULT:
			{
				menuHandler = new QueryByUserNameResultMenuHandler();
			}break;
			case MenuStateType.QUERYBYFZ1:
			case MenuStateType.QUERYBYFZ2:
			case MenuStateType.QUERYBYFZ3:
			case MenuStateType.QUERYBYFZ4:
			case MenuStateType.QUERYBYFZRESULT:
			{
				menuHandler = new QueryByFzMenuHandler();
			}break;
			default:answer[HEAD] ="查询失败，请重新输入";break;
		}

		//计算应答答案
		if(menuHandler != null)
			answer = menuHandler.answerQuestion(session, question);
		
		return new AnswerMessage(Constants.AUTO_FLAG,from,session.getStepStack().peek().getCurMenu(),answer[HEAD],answer[BODY],answer[FOOTER]);
	}
	
	//会话结束或中断
	public static AnswerMessage timeout(String from)
	{
		String[] answer = {"","",""};
		answer[HEAD] = "感谢您的使用，欢迎下次再来";
		answer[BODY] = "重新发起会话,";
		
		return new AnswerMessage(Constants.AUTO_FLAG,from,MenuStateType.UNKNOWN,answer[HEAD],answer[BODY],answer[FOOTER]);
	}
	
	//会话结束或中断
	public static void end(String from)
	{
		//删除与from的会话
		if(sessions.containsKey(from))
			sessions.remove(from);
	}
	
//	//判断lfz是否在上一级列出的列表中
//	public boolean isLfzInCurList(String from, int lfz)
//	{
//		AutoSession autoSession = autoSessions.get(from);
//		Stack<AutoStep> stepStack = autoSession.getStepStack();
//		
//		//首先判断lfz是否在上一个lfz的列出的名单中，比如16组列出了75、24、32、22，但用户此时输入14则不能进行查阅
//		Engroup fatherGroup = EngroupManager.findEngroupByFz(lfz);
//		if(fatherGroup == null || !fatherGroup.getLfz().equals(stepStack.peek().getCurLfz()))
//			return false;
//		
//		return true;
//	}
}
